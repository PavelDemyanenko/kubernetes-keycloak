keycloak:
  basepath: auth/
  username: admin
  password: password
  route:
    tls:
      enabled: false
  extraEnv: |
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"
    - name: KEYCLOAK_IMPORT
      value: /keycloak/master-realm.json
    - name: JAVA_OPTS
      value: >-
        -Djboss.socket.binding.port-offset=1000
  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret
  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/keycloak/"
      readOnly: true
  extraArgs: "-Dkeycloak.migration.action=import -Dkeycloak.migration.provider=dir -Dkeycloak.migration.dir=/keycloak -Dkeycloak.migration.strategy=IGNORE_EXISTING"
  ingress:
    enabled: 	true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/use-regex: "true"
    path: /auth/?(.*)
    hosts:
      - keycloak.localtest.me

# oauth2-proxy:
#   nameOverride: oauth2-proxy-sample
#   ingress:
#     enabled: true
#     hosts:
#       - oauth2-proxy.localtest.me
#     annotations:
#       nginx.ingress.kubernetes.io/server-snippet: |
#         large_client_header_buffers 4 32k;
#   # pick up client_id and client_secret from configFile as opposed to helm .Values.config.clientID and .Values.config.clientSecret
#   proxyVarsAsSecrets: false
#   config:
#     configFile: |-
#       cookie_secret="OQINaROshtE9TcZkNAm-5Zs2Pv3xaWytBmc5W7sPX7w="
#       cookie_domain=".localtest.me"
#       whitelist_domains=[".localtest.me"]
#       # only users with this domain will be let in
#       email_domains=["example.com"]

#       client_id="oauth2-proxy"
#       client_secret="b2F1dGgyLXByb3h5LWNsaWVudC1zZWNyZXQK"
#       cookie_secure="false"

#       redirect_url="http://oauth2-proxy.localtest.me/oauth2/callback"

#       # we don't want to proxy anything so pick a non-existent directory
#       upstreams=["file:///dev/null"]

#       # return authenticated user to nginx
#       set_xauthrequest=true
#       # using http://keycloak.localtest.me/auth/realms/master/.well-known/openid-configuration oauth2-proxy will populate
#       # login_url, redeem_url, and oidc_jwks_url
#       provider="oidc"
#       oidc_issuer_url="http://keycloak.localtest.me/auth/realms/master"

# httpbin:
#   ingress:
#     enabled: true
#     hosts:
#       - httpbin.localtest.me
#     annotations:
#       nginx.ingress.kubernetes.io/auth-signin: http://oauth2-proxy.localtest.me/oauth2/start
#       # That's what will be used in REAL LIFE
#       #nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.localtest.me/oauth2/auth
#       # but because of https://github.com/kubernetes/ingress-nginx/issues/3665
#       nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy-example-oauth2-proxy-sample.default.svc.cluster.local/oauth2/auth
#       nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email

# hello-world:
#   ingress:
#     enabled: true
#     hosts:
#       - hello-world.localtest.me
#     annotations:
#       nginx.ingress.kubernetes.io/auth-signin: http://oauth2-proxy.localtest.me/oauth2/start
#       # That's what will be used in REAL LIFE
#       #nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy.localtest.me/oauth2/auth
#       # but because of https://github.com/kubernetes/ingress-nginx/issues/3665
#       nginx.ingress.kubernetes.io/auth-url: http://oauth2-proxy-example-oauth2-proxy-sample.default.svc.cluster.local/oauth2/auth
#       nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-User,X-Auth-Request-Email
